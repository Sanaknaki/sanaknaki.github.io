{"version":3,"sources":["file/aliSanaknaki_resume.pdf","js/components/ProjectTab.jsx","js/components/ProjectInfo.jsx","js/Main.jsx","js/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","ProjectTab","props","state","hover","show","toggleHover","bind","this","setState","project","type","linkStyle","title","backgroundColor","color","fontWeight","tech","Toast","onClick","toggleProjectInfo","img_link","description","sketch_link","work_link","onMouseEnter","onMouseLeave","style","width","minWidth","cursor","Header","paddingTop","paddingBottom","marginLeft","renderCategoremoji","paddingLeft","className","React","Component","ProjectInfo","Navbar","sticky","expand","variant","bg","position","bottom","Container","Row","Col","md","display","justifyContent","flexDirection","textAlign","fontSize","marginRight","marginTop","workLink","target","href","sketchLink","download","class","alignItems","src","imageLink","height","alt","draggable","Main","projectTitle","projectImageLink","projectDescription","projectSketchLink","projectWorkLink","showProjectInfo","listOfProjects","data","projects","map","push","key","id","Fragment","filter","textDecoration","resume","renderProjects","renderProjectInfo","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7eed1541.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aliSanaknaki_resume.86b57954.pdf\";","import React from 'react';\n\nimport { Toast } from 'react-bootstrap';\n\nimport '../../css/google.css';\n\nclass ProjectTab extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            hover: false,\n            show: true\n        }\n\n        this.toggleHover = this.toggleHover.bind(this);\n    }\n\n    toggleHover() {\n        this.setState({hover: !this.state.hover})\n    };\n\n    renderCategoremoji() {\n        switch(this.props.project.type) {\n            case \"web\":\n                return \"üíª\"\n            case \"ios\":\n                return \"üì±\"\n            case \"design\":\n                return \"üñå\"\n            case \"hardware\":\n                return \"üõ†\"\n            default:\n                return \"üêû\"\n          }\n    };\n\n    render() {\n        if(this.state.show) {\n\n            var linkStyle, title;\n            if (this.state.hover) {\n              linkStyle = {backgroundColor: \"#63CBFF\", color: \"#FFFFFF\", fontWeight: \"bold\"}\n              title=this.props.project.tech;\n            } else {\n              linkStyle = {backgroundColor: \"#FFFFFF\", color: \"#454545\"}\n              title=this.props.project.title\n            }\n\n            return (\n                <Toast onClick={() => this.props.toggleProjectInfo(this.props.project.title, this.props.project.img_link, this.props.project.description, this.props.project.sketch_link, this.props.project.work_link)} show={this.state.show} onMouseEnter={this.toggleHover} onMouseLeave={this.toggleHover} style={{width: \"70vw\", minWidth: \"30vw\", cursor: \"pointer\", ...linkStyle}}>\n                    <Toast.Header style={{paddingTop: \"20px\", paddingBottom: \"20px\", marginLeft: \"10px\", ...linkStyle}}>\n                        {this.renderCategoremoji()}\n                        <strong style={{paddingLeft: \"20px\"}} className=\"mr-auto\">{title}</strong>\n                    </Toast.Header>\n                </Toast>\n            );\n        } else {\n            return null\n        }\n    }\n}\n\nexport default ProjectTab;\n","import React from 'react';\n\nimport { Container, Navbar, Row, Col} from 'react-bootstrap';\n\nimport '../../css/google.css';\n\nclass ProjectInfo extends React.Component {\n    render() {\n        return (\n            <Navbar sticky=\"bottom\" expand=\"lg\" variant=\"light\" bg=\"light\" style={{position: \"sticky\", bottom: \"0px\", width: \"100%\"}}>\n                <Container>\n                    <Row>\n                        <Col md={12} style={{display: \"flex\", justifyContent: \"center\", flexDirection: \"column\", textAlign: \"center\"}}>\n                            <span style={{fontSize: \"25px\", fontWeight: \"700\", color: \"#454545\"}}>{this.props.title}</span>\n                            <span onClick={() => this.props.toggleProjectInfo()} style={{position: \"absolute\", marginRight: \"10px\", marginTop: \"10px\", cursor: \"pointer\"}}><i style={{color: \"#EF4949\"}} className=\"fas fa-times\"></i></span>\n                        </Col>\n\n                        <Col md={12} style={{display: \"flex\", justifyContent: \"center\", flexDirection: \"column\", textAlign: \"center\"}}>\n                            <span>\n                                {(this.props.workLink != \"\") ? <a style={{color: \"#454545\"}} target=\"_blank\" href={this.props.workLink}><i className=\"fas fa-link\"></i></a> : null}\n                                &nbsp;&nbsp;&nbsp;&nbsp;\n                                {(this.props.sketchLink != \"\") ? <a style={{color: \"#FDAB01\"}} href={\"/sketch/\" + this.props.sketchLink + \".sketch\"} download><i class=\"fab fa-sketch\"></i></a> : null}\n                                <br /><br />\n                            </span>\n                        </Col>\n\n                        <Col md={12} style={{display: \"flex\", justifyContent: \"center\", flexDirection: \"column\", textAlign: \"center\"}}>\n                            <span href=\"#\">{this.props.description}</span>\n                            <br /><br />\n                        </Col>\n\n                        <Col md={12} style={{display: \"flex\", justifyContent: \"center\", flexDirection: \"column\", alignItems: \"center\"}}>\n                            <img className=\"project-image\" src={\"/img/\" + this.props.imageLink + \".png\"} width={\"50%\"} height={\"auto\"} alt=\"Project\" draggable={false} />\n                        </Col>\n                    </Row>\n                </Container>\n            </Navbar>\n        );\n    }\n}\n\nexport default ProjectInfo;\n","import React from 'react';\nimport { Row, Col, Container, Navbar } from 'react-bootstrap';\n\nimport ProjectTab from './components/ProjectTab.jsx';\nimport ProjectInfo from './components/ProjectInfo.jsx';\n\nimport data from '../data/data.json';\nimport resume from '../file/aliSanaknaki_resume.pdf';\n\nimport '../css/App.css';\n\nclass Main extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            projectTitle: \"\",\n            projectImageLink: \"\",\n            projectDescription: \"\",\n            projectSketchLink: \"\",\n            projectWorkLink: \"\",\n\n            showProjectInfo: false\n        }\n\n        this.toggleProjectInfo = this.toggleProjectInfo.bind(this);\n    }\n\n    renderProjects() {\n        let listOfProjects = [];\n\n        data.projects.map(project => {\n            listOfProjects.push(\n                <ProjectTab\n                    key={project.id}\n                    project={project}\n                    toggleProjectInfo={this.toggleProjectInfo}\n                />\n            );\n        });\n        \n        return listOfProjects;\n\n    };\n\n    toggleProjectInfo(title=\"\", imageLink=\"\", description=\"\", sketchLink=\"\", workLink=\"\") {\n        if(this.state.showProjectInfo) {\n            this.setState({\n                projectTitle: \"\",\n                projectImageLink: \"\",\n                projectDescription: \"\",\n                projectSketchLink: \"\",\n                projectWorkLink: \"\",\n\n                showProjectInfo: false\n            });\n        } else {\n            this.setState({\n                projectTitle: title,\n                projectImageLink: imageLink,\n                projectDescription: description,\n                projectSketchLink: sketchLink,\n                projectWorkLink: workLink,\n\n                showProjectInfo: true\n            });\n        }\n    }\n\n    renderProjectInfo() {\n        \n        if(this.state.showProjectInfo) {\n            return <ProjectInfo title={this.state.projectTitle} imageLink={this.state.projectImageLink} description={this.state.projectDescription} sketchLink={this.state.projectSketchLink} tech={this.state.tech} workLink={this.state.projectWorkLink} toggleProjectInfo={this.toggleProjectInfo} />\n        }\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <Row onClick={(this.state.showProjectInfo) ? () => this.toggleProjectInfo() : null} style={{filter: (this.state.showProjectInfo) ? \"blur(3px)\" : \"blur(0px)\"}}>\n                    <Col md={6}>\n                        <div className=\"App-header\">\n                            <h1>Ali Sanaknaki</h1>\n                            <h4>Software ? Designer : Developer;</h4>\n                            <a style={{textDecoration: \"none\", color: \"#454545\", fontSize: \"1rem\"}} href={resume}>Check out my resume!</a>\n                        </div>\n                    </Col>\n\n                    <Col md={6}>\n                        <div className=\"App-header\">\n                            {this.renderProjects()}\n                        </div>\n                    </Col>\n                </Row>\n                {this.renderProjectInfo()}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\n\nimport Main from './Main.jsx';\n\nimport '../css/App.css';\n\nfunction App() {\n    return (\n      <Main />\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App.jsx';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}